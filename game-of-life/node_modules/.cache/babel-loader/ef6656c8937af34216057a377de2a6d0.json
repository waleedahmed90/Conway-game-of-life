{"ast":null,"code":"var _jsxFileName = \"/home/che/new/fobid-didactic-game-of-life/game-of-life/src/components/Fin2dArray.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useRef, useState } from \"react\"; //import '/home/che/REACT_TS/go-life/src/App.css';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rows = 10;\nconst cols = 10;\nconst NEIGHBOURS = [[0, 1], [0, -1], [1, -1], [-1, 1], [1, 1], [-1, -1], [1, 0], [-1, 0]];\n\nconst Fin2dArray = () => {\n  _s();\n\n  const [board, setBoard] = useState(() => {\n    const arr = [];\n\n    for (let i = 0; i < rows; i++) {\n      arr.push(Array(cols).fill(0));\n    }\n\n    return arr;\n  });\n  const [running, setRunning] = useState(false);\n  const runningRef = useRef(running);\n  runningRef.current = running;\n  const runSimulation = useCallback(board => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    console.log(\"HELLOW\"); //////\n\n    let newBoard = JSON.parse(JSON.stringify(board));\n\n    for (let i = 1; i < rows - 1; i++) {\n      for (let j = 1; j < cols - 1; j++) {\n        let neighbours = 0; //computing alive neighbours\n\n        NEIGHBOURS.forEach(_ref => {\n          let [x, y] = _ref;\n          const I = i + x;\n          const J = j + y;\n\n          if (I >= 0 && I < rows && J >= 0 && J < cols) {\n            neighbours += board[I][J];\n          }\n        });\n\n        if (neighbours < 3 || neighbours > 4) {\n          newBoard[i][j] = 0;\n        } else if (board[i][j] === 0 && neighbours === 3) {\n          newBoard[i][j] = 1;\n        }\n      }\n    } //update board\n\n\n    setBoard(newBoard); // setTimeout(runSimulation,1000);\n  }, [] //,[board]\n  );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${cols}, 12px)`,\n        width: 'fit-content',\n        margin: '0 auto'\n      },\n      children: board.map((arr, i) => arr.map((cols, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          let newBoard = JSON.parse(JSON.stringify(board));\n          newBoard[i][j] = board[i][j] ? 0 : 1;\n          setBoard(newBoard);\n        },\n        style: {\n          width: 10,\n          height: 10,\n          backgroundColor: board[i][j] ? 'black' : 'white',\n          border: 'solid 1px black'\n        }\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setRunning(!running);\n\n        if (!running) {\n          runningRef.current = true;\n          runSimulation(board);\n        }\n\n        setInterval(() => {\n          runSimulation(board);\n        }, 1000);\n      },\n      children: running ? 'stop' : 'start'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Fin2dArray, \"MYTiUk+Zmn3aJnmlOHnnSjakjy4=\");\n\n_c = Fin2dArray;\nexport default Fin2dArray;\n\nvar _c;\n\n$RefreshReg$(_c, \"Fin2dArray\");","map":{"version":3,"sources":["/home/che/new/fobid-didactic-game-of-life/game-of-life/src/components/Fin2dArray.tsx"],"names":["React","useCallback","useRef","useState","rows","cols","NEIGHBOURS","Fin2dArray","board","setBoard","arr","i","push","Array","fill","running","setRunning","runningRef","current","runSimulation","console","log","newBoard","JSON","parse","stringify","j","neighbours","forEach","x","y","I","J","display","gridTemplateColumns","width","margin","map","height","backgroundColor","border","setInterval"],"mappings":"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","sourcesContent":["import React, {FunctionComponent, useCallback, useRef, useState} from \"react\";\n//import '/home/che/REACT_TS/go-life/src/App.css';\n\nconst rows = 10;\nconst cols = 10;\n\nconst NEIGHBOURS = [\n    [0, 1],\n    [0, -1],\n    [1, -1],\n    [-1, 1],\n    [1, 1],\n    [-1, -1],\n    [1, 0],\n    [-1, 0],\n  ];\n\n\nconst Fin2dArray:FunctionComponent = () => {\n    const [board, setBoard] = useState( ()=> {\n        const arr = [];\n\n        for (let i=0;i<rows;i++){\n            arr.push(Array(cols).fill(0));\n        }\n\n        return arr;\n    });\n\n    const [running, setRunning] = useState(false);\n    const runningRef = useRef(running);\n    runningRef.current = running;\n\n    const runSimulation = useCallback( (board) => {\n        if(!runningRef.current){\n            return;\n        }\n        console.log(\"HELLOW\");\n        //////\n        let newBoard = JSON.parse(JSON.stringify(board));\n        \n        for(let i=1; i<rows-1; i++){\n            for(let j=1 ;j<cols-1; j++){\n                let neighbours = 0;\n                //computing alive neighbours\n            \n                NEIGHBOURS.forEach(([x, y]) => {\n                    const I = i + x;\n                    const J = j + y;\n          \n                    if (I >= 0 && I < rows && J >= 0 && J < cols) {\n                      neighbours += board[I][J];\n                    }\n                  });\n                if (neighbours < 3 || neighbours > 4) {\n                    newBoard[i][j] = 0;\n                } else if (board[i][j] === 0 && neighbours === 3) {\n                    newBoard[i][j] = 1;\n                }    \n            }\n        }\n        //update board\n        setBoard(newBoard);\n\n       // setTimeout(runSimulation,1000);\n        \n    },[]//,[board]\n);\n\n    return(\n        <div>\n            \n            <div style={{display: 'grid', gridTemplateColumns: `repeat(${cols}, 12px)`, width: 'fit-content', margin: '0 auto'}} >\n                {board.map((arr,i) => \n                arr.map((cols,j) => \n                <div\n                    key={`${i}-${j}`}\n                    onClick={() => {\n                        let newBoard = JSON.parse(JSON.stringify(board));\n                        newBoard[i][j] = board[i][j] ? 0:1;\n                        setBoard(newBoard);\n                    }}\n                    style={{width:10, height:10, backgroundColor: board[i][j] ? 'black' : 'white', border: 'solid 1px black'}} \n                    />\n                ))}\n            </div>\n            <button onClick={() =>{\n                setRunning(!running);\n                if(!running){\n                    runningRef.current=true;\n                    runSimulation(board);\n                }\n                setInterval(() => {\n                    runSimulation(board);\n                  }, 1000);\n            }}>{running ? 'stop': 'start'}</button>\n\n        </div>\n    );\n\n}\nexport default Fin2dArray;"]},"metadata":{},"sourceType":"module"}